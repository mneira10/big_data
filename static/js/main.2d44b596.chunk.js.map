{"version":3,"sources":["components/taller1/Taller1.js","components/taller2/Taller2.js","components/taller3/Taller3.js","App.js","serviceWorker.js","index.js"],"names":["Taller1","react_default","a","createElement","src","Component","Taller2","Taller3","muiTheme","getMuiTheme","palette","primary1Color","accent1Color","App","className","MuiThemeProvider_default","Tabs","label","class","Taller1_Taller1","Taller2_Taller2","Taller3_Taller3","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+PAEqBA,mLAEjB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,sBAEAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,mEAEAF,EAAAC,EAAAC,cAAA,OAAKC,IAAI,0GAToBC,aCAhBC,mLAEjB,OACEL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,2BAL6BE,aCAhBE,mLAEjB,OACEN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,2BAL6BE,aCQ/BG,EAAWC,IAAY,CAC3BC,QAAS,CACPC,cAAe,UACfC,aAAc,aAsCHC,mLA9BX,OACEZ,EAAAC,EAAAC,cAAA,OAAKW,UAAU,OACbb,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,qBAEAF,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CAAkBM,SAAUA,GAC1BP,EAAAC,EAAAC,cAACa,EAAA,KAAD,KACEf,EAAAC,EAAAC,cAACa,EAAA,IAAD,CAAKC,MAAM,YACThB,EAAAC,EAAAC,cAAA,OAAKe,MAAM,UACTjB,EAAAC,EAAAC,cAACgB,EAAD,QAGJlB,EAAAC,EAAAC,cAACa,EAAA,IAAD,CAAKC,MAAM,YACThB,EAAAC,EAAAC,cAAA,OAAKe,MAAM,UACTjB,EAAAC,EAAAC,cAACiB,EAAD,QAGJnB,EAAAC,EAAAC,cAACa,EAAA,IAAD,CAAKC,MAAM,YACThB,EAAAC,EAAAC,cAAA,OAAKe,MAAM,UACTjB,EAAAC,EAAAC,cAACkB,EAAD,kBAvBEhB,aCLEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2d44b596.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Taller1 extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Taller 1</h1>\n\n        <p>//TODO</p>\n        <p>Aqu√≠ va a ir todo lo del primer taller. Imagensita:</p>\n\n        <img src='https://upload.wikimedia.org/wikipedia/commons/9/9b/Social_Network_Analysis_Visualization.png'></img>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class Taller2 extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Taller 2</h1>\n        <p>//TODO</p>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class Taller3 extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Taller 3</h1>\n        <p>//TODO</p>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport {Tabs, Tab} from 'material-ui/Tabs';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider'; \nimport './App.css';\nimport getMuiTheme from 'material-ui/styles/getMuiTheme';\nimport Taller1 from './components/taller1/Taller1';\nimport Taller2 from './components/taller2/Taller2';\nimport Taller3 from './components/taller3/Taller3';\n\n//color palette \nconst muiTheme = getMuiTheme({\n  palette: {\n    primary1Color: '#448ef6',\n    accent1Color: '#f16821',\n  },\n});\n\nclass App extends Component {\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 >Big Data</h1>\n        <h2 >Grupo 7</h2>\n        \n        <MuiThemeProvider muiTheme={muiTheme}>\n          <Tabs>\n            <Tab label=\"Taller 1\" >\n              <div class=\"taller\">\n                <Taller1/>\n              </div>\n            </Tab>\n            <Tab label=\"Taller 2\" >\n              <div class=\"taller\">\n                <Taller2/>\n              </div>\n            </Tab>\n            <Tab label=\"Taller 3\">\n              <div class=\"taller\">\n                <Taller3/>\n              </div>\n            </Tab>\n          </Tabs>\n        </MuiThemeProvider>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}